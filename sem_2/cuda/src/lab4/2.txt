#include <stdio.h>
#include <thrust/extrema.h>
#include <thrust/device_vector.h>
#include <stdlib.h>
#include <math.h>
#include <stack>
#include <vector>
 
 
 
#define ZERO 1e-7
 
#define get2D(arr, n, m, i, j) (arr[j*n + i])
 
#define CSC(call) do {              \
    cudaError_t res = call;         \
    if (res != cudaSuccess) {       \
        fprintf(stderr, "CUDA error %s:%d message: %s\n", __FILE__, __LINE__,   \
                cudaGetErrorString(res));   \
        exit(0);                            \
    }                                       \
} while(0)
 
 
 
struct comparator {
    __host__ __device__ bool operator()(double a, double b) {
        return a < b;
    }
};
 
struct AbsMax {
    __host__ __device__ bool operator()(double a, double b) {
        return fabs(a) < fabs(b);
    }
};
 
void printMatrix(double* A, int n, int m) {
    for(int i = 0; i < n; ++i) {
        for(int j = 0; j < m; ++j) {
            //printf("(%d %d %d) ", i, j, j*m+i);
            int idx = j*n + i;
            printf("%.2lf ", A[idx]);
        }
        printf("\n");
    }
    printf("\n");
}
 
__global__ void swapRows(double* A, int n, int m, int k, int i, int j) {
    int idx = blockDim.x * blockIdx.x + threadIdx.x;
    int offset = gridDim.x * blockDim.x;
    while(idx < m + k) {
        int cnt = idx * n;
        int first  = i + cnt;
        int second = j + cnt;
        double tmp = A[first];
        A[first] = A[second];
        A[second] = tmp;
        idx += offset;
    }
}
 
 
__global__ void subtractForward(double* A, int n, int m, int k, int i, int j) {
    //int idx = threadIdx.x + blockDim.x * blockIdx.x;
    int col = blockIdx.x;
    int row = threadIdx.x;
    //int colOffset = gridDim.x;
    //int rowOffset = blockDim.x;
 
    col += j + 1;
    row += i + 1;
 
    int first = j*n + i;
    double a1 = A[first];
    int second = j*n;
    while(col < m + k) {
        int cur = col*n;
        row = threadIdx.x + i + 1;
        while(row < n) {
            //int second = i*n + row;
            double l = A[second + row] / a1;
 
            A[cur + row] -= l * A[cur + i];
 
            row += blockDim.x;
        }
 
        col += gridDim.x;
    }
}
 
 
__global__ void subtractBack(double* A, int n, int m, int k, int* stairs, int size) {
    int col = blockIdx.x;
    int row = threadIdx.x;
    int colOffset = gridDim.x;
    int rowOffset = blockDim.x;
 
    int start = n*m;
    while(col < k) {
        for(int i = size - 1; i > 0; i -= 2) {
            row = threadIdx.x;
            int stairCol = stairs[i];
            int stairRow = stairs[i - 1];
 
            int off = stairCol * n;
            double a1 = A[off + stairRow];
            while(row < stairRow) {
                double l = A[off + row] / a1;
 
                A[start + col*n + row] -= l * A[start + col*n + stairRow];
 
                row += rowOffset;
            }
        }
 
 
        col += colOffset;
    }
}
 
 
__global__ void subtractBack1(double* A, int n, int m, int k, int i, int j) {
    int col = blockIdx.x;
    int row = threadIdx.x;
    int colOffset = gridDim.x;
    int rowOffset = blockDim.x;
   
    double a1 = A[j*n + i];
    int start = m*n;
    for(; col < k; col += colOffset) {
        for(row = threadIdx.x; row < i; row += rowOffset) {
            double l = A[j*n + row] / a1;
            A[start + col*n + row] -= l * A[start + col*n + i];
        }
    }
 
}
 
 
__global__ void divide1(double* A, int n, int m, int k, int i, int j) {
    int idx = blockDim.x * blockIdx.x + threadIdx.x;
    int offset = gridDim.x * blockDim.x;
    double l = A[j*n + i];
    int start = j*n + i;
 
    //while(idx < k) {
    for(; idx < k; idx += offset) {
        A[start + idx*n] /= l;
    }
}
 
 
__global__ void divide(double* A, int n, int m, int k, int* stairs, int size) {
    int stair = blockIdx.x;
    int stairOffset = gridDim.x;
    int colOffset = blockDim.x;
    size /= 2;
    while(stair < size) {
        int col = threadIdx.x;
        int i = stairs[stair * 2];
        int j = stairs[stair * 2 + 1];
 
        double l = A[j * n + i];
        int off = n*m + i;
        while(col < k) {
            A[off + col*n] /= l;
            col += colOffset;
        }
 
        stair += stairOffset;
    }
 
}
 
 
void printMatrixErr(double* A, int n, int m, int k) {
    //fprintf(stderr, "Err\n");
    fprintf(stderr, "%d %d %d\n", n, m, k);
    for(int i = 0; i < n; ++i) {
        for(int j = 0; j < m; ++j) {
            //printf("(%d %d %d) ", i, j, j*m+i);
            int idx = j*n + i;
            fprintf(stderr, "%.3lf ", A[idx]);
        }
        printf("\n");
    }
    printf("\n");
 
    for(int i = 0; i < n; ++i) {
        for(int j = 0; j < k; ++j) {
            int idx = n*m + j*n + i;
            fprintf(stderr, "%lf ", A[idx]);
        }
        printf("\n");
    }
 
    printf("\n");
 
}
 
 
int main() {
    int n,m,k;
    scanf("%d%d%d", &n, &m, &k);
 
    double* A = (double*)malloc(n * (m+k)  * sizeof(double));
    //memset(A, 0, sizeof(double)*n*(m+k));
    //double* B = (double*)malloc(n * k * sizeof(double));
 
    double* A1 = (double*)malloc(n * (m+k) * sizeof(double));
    double* B1 = (double*)malloc(n * k * sizeof(double));
 
 
    int i1 = 0;
    int j1 = 0;
    for(int z = 0; z < n * m; ++z) {
        //scanf("%lf", &A[i]);
        scanf("%lf", &A[j1*n+i1]);
        j1++;
        if(j1 >= m) {
            j1 = 0;
            i1++;
        }
    }
    i1 = j1 = 0;
    for(int i = 0; i < n * k; ++i) {
        scanf("%lf", &(A[n*(m+j1) + i1]));
        j1++;
        if(j1 >= k) {
            j1 = 0;
            i1++;
        }
    }
 
    //Debug print
    //for(int i = 0; i < n * m; ++i) {
    //  printf("%.4lf ", A[i]);
    //}
    //printf("\n\n-+-+-+-+-+-+-+-+\n\n");
 
 
 
    double* dev_A;
    cudaMalloc(&dev_A, sizeof(double) * n*(m+k));
    cudaMemcpy(dev_A, A, sizeof(double) * n*(m+k), cudaMemcpyHostToDevice);
 
 
    AbsMax comp;
    //Debug print
    //printMatrix(A, n, m);
    //printMatrix(A+n*m, n, k);
 
    printMatrixErr(A, n,m,k);
    //printMatrixErr(A+n*m, n, k);
 
 
    int cnt = 0;
    int colSize = n;
    std::stack< std::pair<int, int> > swaps;
    std::vector< int > stairs;
    for(int i = 0; i < m; ++i) {
 
        thrust::device_ptr<double> p_arr = thrust::device_pointer_cast(dev_A);
        int offset = i * n;
        thrust::device_ptr<double> res = thrust::max_element(p_arr + offset + cnt,
                                                             p_arr + offset + colSize,comp);
        int j = (int)(res - (p_arr + offset));
        double max;
 
        cudaMemcpy(&max, dev_A + (i*n + j), sizeof(double), cudaMemcpyDeviceToHost);
        cudaDeviceSynchronize();
        //Debug print
        //printf("%d of %d----------------------------\n", i, m);
        //printf("off+cnt: %d      off+colSize: %d\n", offset + cnt, offset + colSize);
        //printf("max: %.2f\n", max);
 
        if(fabs(max) > ZERO) {
            swaps.push(std::make_pair(i,j));
 
 
            //Debug print
            //printf("%d %d\n", cnt+1, j+1);
 
 
            if(cnt != j) {
                swapRows<<<256,256>>>(dev_A, n, m, k, cnt, j);
                CSC(cudaGetLastError());
            }
            cudaDeviceSynchronize();
            //Debug print
            //cudaMemcpy(A1, dev_A, sizeof(double) * n*m, cudaMemcpyDeviceToHost);
            //cudaMemcpy(B1, dev_A + n*m, sizeof(double) * n*k, cudaMemcpyDeviceToHost);
            //cudaDeviceSynchronize();
            //printMatrix(A1, n, m);
            //printMatrix(B1, n, k);
 
            subtractForward<<<256,256>>>(dev_A, n, m, k, cnt, i);
            CSC(cudaGetLastError());
 
            cudaDeviceSynchronize();
            //int size = n - i - 1;
            cudaMemset(dev_A + offset + cnt + 1, 0, (n - cnt - 1) * sizeof(double));
            //Debug print
            //cudaDeviceSynchronize();
            //cudaMemcpy(A1, dev_A, sizeof(double) * n*m, cudaMemcpyDeviceToHost);
            //cudaMemcpy(B1, dev_A + n*m, sizeof(double) * n*k, cudaMemcpyDeviceToHost);
            //cudaDeviceSynchronize();
            //printf("\n+++++++++++++++\n\n");
            //printMatrix(A1, n, m);
            //printMatrix(B1, n, k);
 
            stairs.push_back(cnt);
            stairs.push_back(i);
 
            cnt++;
            if(cnt == n || cnt == m) {
                break;
            }
        }
    }
    //Debug print
    //printf("Stairs: \n");
    //for(int i = 0; i < stairs.size(); i += 2) {
    //  printf("%d %d\n", stairs[i], stairs[i + 1]);
    //}
    //printf("\n");
 
    //int* dev_stairs;
    //cudaMalloc(&dev_stairs, sizeof(int) * stairs.size());
    //cudaMemcpy(dev_stairs, stairs.data(), sizeof(int) * stairs.size(), cudaMemcpyHostToDevice);
 
    //subtractBack<<<256, 256>>>(dev_A, n, m, k, dev_stairs, stairs.size());
   
            //cudaMemcpy(A1, dev_A, sizeof(double) * n*m, cudaMemcpyDeviceToHost);
            //cudaMemcpy(B1, dev_A + n*m, sizeof(double) * n*k, cudaMemcpyDeviceToHost);
    cudaDeviceSynchronize();
            //printf("\n+++++++++++++++\n\n");
            //printMatrix(A1, n, m);
            //printMatrix(B1, n, k);
    for(int i = 0; i < (int)stairs.size(); i += 2) {
        subtractBack1<<<256,256>>>(dev_A, n, m, k, stairs[i], stairs[i + 1]);
 
            //cudaMemcpy(A1, dev_A, sizeof(double) * n*m, cudaMemcpyDeviceToHost);
            //cudaMemcpy(B1, dev_A + n*m, sizeof(double) * n*k, cudaMemcpyDeviceToHost);
            //cudaDeviceSynchronize();
            //printf("\n+++++++++++++++\n\n");
            //printMatrix(A1, n, m);
            //printMatrix(B1, n, k);
    }
    CSC(cudaGetLastError());
    //printf("\n*****************************************************\n\n");
    //divide<<<256, 256>>>(dev_A, n, m, k, dev_stairs, stairs.size());
    //for(int i = 0; i < stairs.size(); i += 2) {
        //divide1<<<256,256>>>(dev_A, n, m, k, stairs[i], stairs[i + 1]);
 
                    //cudaMemcpy(A1, dev_A, sizeof(double) * n*m, cudaMemcpyDeviceToHost);
                    //cudaMemcpy(B1, dev_A + n*m, sizeof(double) * n*k, cudaMemcpyDeviceToHost);
                    //cudaDeviceSynchronize();
                    //printf("\n+++++++++++++++\n\n");
                    //printMatrix(A1, n, m);
                    //printMatrix(B1, n, k);
    //}
    CSC(cudaGetLastError());
    cudaDeviceSynchronize();
   
    cudaMemcpy(A1, dev_A, sizeof(double) * n*m, cudaMemcpyDeviceToHost);
    cudaMemcpy(B1, dev_A + n*m, sizeof(double) * n*k, cudaMemcpyDeviceToHost);
 
    //Debug print
    //printf("- - - - - - - - - - - - - - - - - - - -\n");
    //printMatrix(B1, n, k);
    //printf("///\n\n");
    cudaDeviceSynchronize();
    int cnt1 = 0;
    for(int z = 0; z < (int)stairs.size(); z += 2) {
        int i = stairs[z];
        int j = stairs[z + 1];
        while(cnt1 < j) {
            for(int x = 0; x < k; ++x) {
                printf("0.0000000000e+00 ");
            }
            printf("\n");
            cnt1++;
        }
 
 
        for(int x = 0; x < k; ++x) {
            printf("%.10e ", B1[x*n + i] / A1[j*n + i]);
        }
        //printf("| %.4lf", A1[j*n + i]);
        printf("\n");
        cnt1++;
    }
    while(cnt1 < m) {
        for(int x = 0; x < k; ++x) {
            printf("0.0000000000e+00 ");
        }
        printf("\n");
        cnt1++;
    }
 
    cudaDeviceSynchronize();
    //cudaFree(dev_stairs);
    cudaFree(dev_A);
    free(A);
    free(A1);
    free(B1);
    return 0;
}